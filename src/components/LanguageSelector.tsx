import React, { useState } from 'react';
import { Globe, ChevronDown } from 'lucide-react';

interface LanguageSelectorProps {
  currentLanguage: string;
  onLanguageChange: (language: string) => void;
}

const LanguageSelector: React.FC<LanguageSelectorProps> = ({ currentLanguage, onLanguageChange }) => {
  const [isOpen, setIsOpen] = useState(false);

  const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'mr', name: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' },
    { code: 'ta', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
    { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
    { code: 'kn', name: '‡≤ï‡≤®‡≥ç‡≤®‡≤°', flag: 'üáÆüá≥' },
    { code: 'bn', name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', flag: 'üáÆüá≥' }
  ];

  const currentLang = languages.find(lang => lang.name === currentLanguage) || languages[0];

  const handleLanguageSelect = (language: any) => {
    onLanguageChange(language.name);
    setIsOpen(false);
    
    // Speak language change confirmation
    if ('speechSynthesis' in window) {
      const confirmations = {
        'English': 'Language changed to English',
        '‡§π‡§ø‡§Ç‡§¶‡•Ä': '‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§ó‡§à',
        '‡§Æ‡§∞‡§æ‡§†‡•Ä': '‡§≠‡§æ‡§∑‡§æ ‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§¨‡§¶‡§≤‡§≤‡•Ä',
        '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç': '‡ÆÆ‡Øä‡Æ¥‡Æø ‡Æ§‡ÆÆ‡Æø‡Æ¥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ',
        '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å': '‡∞≠‡∞æ‡∞∑ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞ï‡±Å ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø',
        '‡≤ï‡≤®‡≥ç‡≤®‡≤°': '‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤¨‡≤¶‡≤≤‡≤æ‡≤Ø‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü',
        '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ': '‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá'
      };
      
      const utterance = new SpeechSynthesisUtterance(confirmations[language.name as keyof typeof confirmations]);
      utterance.rate = 0.9;
      window.speechSynthesis.speak(utterance);
    }
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 bg-white rounded-xl shadow-sm px-4 py-2 hover:shadow-md transition-all duration-200 border"
        style={{ borderColor: '#3CAEA3' }}
      >
        <Globe className="w-5 h-5" style={{ color: '#20639B' }} />
        <span className="text-sm font-medium" style={{ color: '#1A1A1A' }}>{currentLang.name}</span>
        <ChevronDown className={`w-4 h-4 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg border z-50" style={{ borderColor: '#3CAEA3' }}>
          <div className="p-2">
            {languages.map((language) => (
              <button
                key={language.code}
                onClick={() => handleLanguageSelect(language)}
                className={`w-full text-left px-3 py-2 rounded-lg transition-colors flex items-center space-x-3 ${
                  currentLanguage === language.name 
                    ? 'text-white' 
                    : 'hover:bg-gray-50'
                }`}
                style={{ 
                  backgroundColor: currentLanguage === language.name ? '#3CAEA3' : 'transparent',
                  color: currentLanguage === language.name ? 'white' : '#1A1A1A'
                }}
              >
                <span className="text-lg">{language.flag}</span>
                <span className="font-medium">{language.name}</span>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Overlay to close dropdown */}
      {isOpen && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

export default LanguageSelector;